@startuml
Abstract Final
class Main
class Controller
class Io
Abstract Tournament
class DBConnector
class Knockout
class Bracket
class Match
class Team
class Player
class Group

Main *-- Controller
Controller *-- Io
Io *-- Tournament
Tournament "1" <|-- "is a" Knockout
Tournament "1" <|-- "is a" Group
Knockout "1" *--"1"Bracket :contains
Group "1" *-- "many" Match :contains
Bracket "1" *-- "16" Team :contains
Bracket "1" *-- "15" Match :contains
Team "1" *-- "2" Player :contains
Match "1" *-- "2" Team :contains
Io *-- DBConnector

Main : + control.UI()

Final : - String READ_LOCATION
Final : - int TOURNAMENT_START_YEAR
Final : - int TOURNAMENT_START_TIME

Io : + boolean createNewTournamentFile()
Io : + void startTheTournament()
Io : - private ArrayList<Team>participatingTeams

DBConnector : - final String DB_URL
DBConnector : - final String USER
DBConnector : - final String PASS
DBConnector : - int resultCounter = 0;
DBConnector : + String[] readTeamsData()

Controller : + void UI()
Controller : + void createTournament()
Controller : + void startTournament()
Controller : - Scanner scan

Tournament : - private final String tournamentName
Tournament : - private team tournamentWinner
Tournament : - private int tournamentStartTime
Tournament : - private ArrayList<Team> teams
Tournament : # protected Bracket connectedBracket
Tournament : + tournament()
Tournament : + getTournamentName()
Tournament : + Team getTournamentWinner()
Tournament : + void setTournamentWinner()
Tournament : + ArrayList<Team> getTeams()
Tournament : + abstract void runTournament();

Knockout : + Override runTournament()
Knockout : - String name
Knockout : - ArrayList<Team>teams

Group : + Override runTournament()
Group : - String name
Group : - ArrayList<Team>teams

Bracket : - private ArrayList<Team>teams
Bracket : - private ArrayList<Match>matches
Bracket : - private ArrayList<Match>temMatches
Bracket : - private final int numberParticipatingTeams
Bracket : - private int roundNumber
Bracket : + void randomSeeding()
Bracket : + void startMatch()
Bracket : + void nextRound()
Bracket : + void nextMatchReminder(int currentMatch)

Team : - private final String teamName
Team : - private int totalGoalScore
Team : - private ArrayList<Player>players
Team : + Override toString()
Team : + void setTotalGoalScore()
Team : + String getTeamName()

Match : + void matchWinner()
Match : + Override toString()
Match : - private int teamAScore
Match : - private int teamBScore
Match : - private Team teamWinner
Match : - private Team teamA
Match : - private Team teamB

Player : - private String name
Player : + Override toString()
@enduml